State 0:
program' -> . program [ # ]
-- On CLASS shift to state 1
-- On program shift to state 91
-- On main_class shift to state 92

State 1:
main_class -> CLASS . IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On IDENT shift to state 2

State 2:
main_class -> CLASS IDENT . LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On LBRACE shift to state 3

State 3:
main_class -> CLASS IDENT LBRACE . PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On PUBLIC shift to state 4

State 4:
main_class -> CLASS IDENT LBRACE PUBLIC . STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On STATIC shift to state 5

State 5:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC . VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On VOID shift to state 6

State 6:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID . MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On MAIN shift to state 7

State 7:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN . LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On LPAREN shift to state 8

State 8:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN . STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On STRING shift to state 9

State 9:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING . LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On LBRACKET shift to state 10

State 10:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET . RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On RBRACKET shift to state 11

State 11:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET . IDENT RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On IDENT shift to state 12

State 12:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT . RPAREN LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On RPAREN shift to state 13

State 13:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN . LBRACE statement RBRACE RBRACE [ EOF CLASS ]
-- On LBRACE shift to state 14

State 14:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE . statement RBRACE RBRACE [ EOF CLASS ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 70
-- On statement shift to state 88

State 15:
statement -> WHILE . LPAREN expression RPAREN statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On LPAREN shift to state 16

State 16:
statement -> WHILE LPAREN . expression RPAREN statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 58

State 17:
raw_expression -> THIS . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> THIS 
-- On SEMICOLON reduce production raw_expression -> THIS 
-- On RPAREN reduce production raw_expression -> THIS 
-- On RBRACKET reduce production raw_expression -> THIS 
-- On PLUS reduce production raw_expression -> THIS 
-- On MINUS reduce production raw_expression -> THIS 
-- On LT reduce production raw_expression -> THIS 
-- On LBRACKET reduce production raw_expression -> THIS 
-- On DOT reduce production raw_expression -> THIS 
-- On COMMA reduce production raw_expression -> THIS 
-- On AND reduce production raw_expression -> THIS 

State 18:
raw_expression -> NOT . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 57

State 19:
raw_expression -> NEW . INTEGER LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> NEW . IDENT LPAREN RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On INTEGER shift to state 20
-- On IDENT shift to state 54

State 20:
raw_expression -> NEW INTEGER . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On LBRACKET shift to state 21

State 21:
raw_expression -> NEW INTEGER LBRACKET . expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 52

State 22:
expression -> LPAREN . expression RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 27

State 23:
raw_expression -> INT_CONST . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> INT_CONST 
-- On SEMICOLON reduce production raw_expression -> INT_CONST 
-- On RPAREN reduce production raw_expression -> INT_CONST 
-- On RBRACKET reduce production raw_expression -> INT_CONST 
-- On PLUS reduce production raw_expression -> INT_CONST 
-- On MINUS reduce production raw_expression -> INT_CONST 
-- On LT reduce production raw_expression -> INT_CONST 
-- On LBRACKET reduce production raw_expression -> INT_CONST 
-- On DOT reduce production raw_expression -> INT_CONST 
-- On COMMA reduce production raw_expression -> INT_CONST 
-- On AND reduce production raw_expression -> INT_CONST 

State 24:
raw_expression -> IDENT . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> IDENT 
-- On SEMICOLON reduce production raw_expression -> IDENT 
-- On RPAREN reduce production raw_expression -> IDENT 
-- On RBRACKET reduce production raw_expression -> IDENT 
-- On PLUS reduce production raw_expression -> IDENT 
-- On MINUS reduce production raw_expression -> IDENT 
-- On LT reduce production raw_expression -> IDENT 
-- On LBRACKET reduce production raw_expression -> IDENT 
-- On DOT reduce production raw_expression -> IDENT 
-- On COMMA reduce production raw_expression -> IDENT 
-- On AND reduce production raw_expression -> IDENT 

State 25:
raw_expression -> BOOL_CONST . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> BOOL_CONST 
-- On SEMICOLON reduce production raw_expression -> BOOL_CONST 
-- On RPAREN reduce production raw_expression -> BOOL_CONST 
-- On RBRACKET reduce production raw_expression -> BOOL_CONST 
-- On PLUS reduce production raw_expression -> BOOL_CONST 
-- On MINUS reduce production raw_expression -> BOOL_CONST 
-- On LT reduce production raw_expression -> BOOL_CONST 
-- On LBRACKET reduce production raw_expression -> BOOL_CONST 
-- On DOT reduce production raw_expression -> BOOL_CONST 
-- On COMMA reduce production raw_expression -> BOOL_CONST 
-- On AND reduce production raw_expression -> BOOL_CONST 

State 26:
expression -> raw_expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production expression -> raw_expression 
-- On SEMICOLON reduce production expression -> raw_expression 
-- On RPAREN reduce production expression -> raw_expression 
-- On RBRACKET reduce production expression -> raw_expression 
-- On PLUS reduce production expression -> raw_expression 
-- On MINUS reduce production expression -> raw_expression 
-- On LT reduce production expression -> raw_expression 
-- On LBRACKET reduce production expression -> raw_expression 
-- On DOT reduce production expression -> raw_expression 
-- On COMMA reduce production expression -> raw_expression 
-- On AND reduce production expression -> raw_expression 

State 27:
expression -> LPAREN expression . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
-- On TIMES shift to state 28
-- On RPAREN shift to state 34
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 28:
raw_expression -> expression TIMES . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 29

State 29:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression TIMES expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On LT shift to state 30
-- On AND shift to state 32
-- On TIMES reduce production raw_expression -> expression TIMES expression 
-- On SEMICOLON reduce production raw_expression -> expression TIMES expression 
-- On RPAREN reduce production raw_expression -> expression TIMES expression 
-- On RBRACKET reduce production raw_expression -> expression TIMES expression 
-- On PLUS reduce production raw_expression -> expression TIMES expression 
-- On MINUS reduce production raw_expression -> expression TIMES expression 
-- On LBRACKET reduce production raw_expression -> expression TIMES expression 
-- On DOT reduce production raw_expression -> expression TIMES expression 
-- On COMMA reduce production raw_expression -> expression TIMES expression 

State 30:
raw_expression -> expression LT . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 31

State 31:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression LT expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> expression LT expression 
-- On SEMICOLON reduce production raw_expression -> expression LT expression 
-- On RPAREN reduce production raw_expression -> expression LT expression 
-- On RBRACKET reduce production raw_expression -> expression LT expression 
-- On PLUS reduce production raw_expression -> expression LT expression 
-- On MINUS reduce production raw_expression -> expression LT expression 
-- On LBRACKET reduce production raw_expression -> expression LT expression 
-- On DOT reduce production raw_expression -> expression LT expression 
-- On COMMA reduce production raw_expression -> expression LT expression 
-- On AND reduce production raw_expression -> expression LT expression 

State 32:
raw_expression -> expression AND . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 33

State 33:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression AND expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On LT shift to state 30
-- On TIMES reduce production raw_expression -> expression AND expression 
-- On SEMICOLON reduce production raw_expression -> expression AND expression 
-- On RPAREN reduce production raw_expression -> expression AND expression 
-- On RBRACKET reduce production raw_expression -> expression AND expression 
-- On PLUS reduce production raw_expression -> expression AND expression 
-- On MINUS reduce production raw_expression -> expression AND expression 
-- On LBRACKET reduce production raw_expression -> expression AND expression 
-- On DOT reduce production raw_expression -> expression AND expression 
-- On COMMA reduce production raw_expression -> expression AND expression 
-- On AND reduce production raw_expression -> expression AND expression 

State 34:
expression -> LPAREN expression RPAREN . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production expression -> LPAREN expression RPAREN 
-- On SEMICOLON reduce production expression -> LPAREN expression RPAREN 
-- On RPAREN reduce production expression -> LPAREN expression RPAREN 
-- On RBRACKET reduce production expression -> LPAREN expression RPAREN 
-- On PLUS reduce production expression -> LPAREN expression RPAREN 
-- On MINUS reduce production expression -> LPAREN expression RPAREN 
-- On LT reduce production expression -> LPAREN expression RPAREN 
-- On LBRACKET reduce production expression -> LPAREN expression RPAREN 
-- On DOT reduce production expression -> LPAREN expression RPAREN 
-- On COMMA reduce production expression -> LPAREN expression RPAREN 
-- On AND reduce production expression -> LPAREN expression RPAREN 

State 35:
raw_expression -> expression PLUS . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 36

State 36:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression PLUS expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES shift to state 28
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On AND shift to state 32
-- On SEMICOLON reduce production raw_expression -> expression PLUS expression 
-- On RPAREN reduce production raw_expression -> expression PLUS expression 
-- On RBRACKET reduce production raw_expression -> expression PLUS expression 
-- On PLUS reduce production raw_expression -> expression PLUS expression 
-- On LBRACKET reduce production raw_expression -> expression PLUS expression 
-- On DOT reduce production raw_expression -> expression PLUS expression 
-- On COMMA reduce production raw_expression -> expression PLUS expression 

State 37:
raw_expression -> expression MINUS . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 38

State 38:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression MINUS expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES shift to state 28
-- On LT shift to state 30
-- On AND shift to state 32
-- On SEMICOLON reduce production raw_expression -> expression MINUS expression 
-- On RPAREN reduce production raw_expression -> expression MINUS expression 
-- On RBRACKET reduce production raw_expression -> expression MINUS expression 
-- On PLUS reduce production raw_expression -> expression MINUS expression 
-- On MINUS reduce production raw_expression -> expression MINUS expression 
-- On LBRACKET reduce production raw_expression -> expression MINUS expression 
-- On DOT reduce production raw_expression -> expression MINUS expression 
-- On COMMA reduce production raw_expression -> expression MINUS expression 

State 39:
raw_expression -> expression LBRACKET . expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 40

State 40:
raw_expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression LBRACKET expression . RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
-- On TIMES shift to state 28
-- On RBRACKET shift to state 41
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 41:
raw_expression -> expression LBRACKET expression RBRACKET . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On SEMICOLON reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On RPAREN reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On RBRACKET reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On PLUS reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On MINUS reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On LT reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On LBRACKET reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On DOT reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On COMMA reduce production raw_expression -> expression LBRACKET expression RBRACKET 
-- On AND reduce production raw_expression -> expression LBRACKET expression RBRACKET 

State 42:
raw_expression -> expression DOT . LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On LENGTH shift to state 43
-- On IDENT shift to state 44

State 43:
raw_expression -> expression DOT LENGTH . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> expression DOT LENGTH 
-- On SEMICOLON reduce production raw_expression -> expression DOT LENGTH 
-- On RPAREN reduce production raw_expression -> expression DOT LENGTH 
-- On RBRACKET reduce production raw_expression -> expression DOT LENGTH 
-- On PLUS reduce production raw_expression -> expression DOT LENGTH 
-- On MINUS reduce production raw_expression -> expression DOT LENGTH 
-- On LT reduce production raw_expression -> expression DOT LENGTH 
-- On LBRACKET reduce production raw_expression -> expression DOT LENGTH 
-- On DOT reduce production raw_expression -> expression DOT LENGTH 
-- On COMMA reduce production raw_expression -> expression DOT LENGTH 
-- On AND reduce production raw_expression -> expression DOT LENGTH 

State 44:
raw_expression -> expression DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On LPAREN shift to state 45

State 45:
raw_expression -> expression DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On separated_nonempty_list(COMMA,expression) shift to state 46
-- On raw_expression shift to state 26
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 47
-- On expression shift to state 49
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expression)) -> 

State 46:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) 

State 47:
raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On RPAREN shift to state 48

State 48:
raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On SEMICOLON reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On RPAREN reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On RBRACKET reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On PLUS reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On MINUS reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On LT reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On LBRACKET reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On DOT reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On COMMA reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 
-- On AND reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 

State 49:
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT COMMA AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
-- On TIMES shift to state 28
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On COMMA shift to state 50
-- On AND shift to state 32
-- On RPAREN reduce production separated_nonempty_list(COMMA,expression) -> expression 

State 50:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On separated_nonempty_list(COMMA,expression) shift to state 51
-- On raw_expression shift to state 26
-- On expression shift to state 49

State 51:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) 

State 52:
raw_expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> NEW INTEGER LBRACKET expression . RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES shift to state 28
-- On RBRACKET shift to state 53
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 53:
raw_expression -> NEW INTEGER LBRACKET expression RBRACKET . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On SEMICOLON reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On RPAREN reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On RBRACKET reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On PLUS reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On MINUS reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On LT reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On LBRACKET reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On DOT reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On COMMA reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 
-- On AND reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET 

State 54:
raw_expression -> NEW IDENT . LPAREN RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On LPAREN shift to state 55

State 55:
raw_expression -> NEW IDENT LPAREN . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On RPAREN shift to state 56

State 56:
raw_expression -> NEW IDENT LPAREN RPAREN . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On SEMICOLON reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On RPAREN reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On RBRACKET reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On PLUS reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On MINUS reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On LT reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On LBRACKET reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On DOT reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On COMMA reduce production raw_expression -> NEW IDENT LPAREN RPAREN 
-- On AND reduce production raw_expression -> NEW IDENT LPAREN RPAREN 

State 57:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
raw_expression -> NOT expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET DOT COMMA AND ]
-- On TIMES shift to state 28
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32
-- On SEMICOLON reduce production raw_expression -> NOT expression 
-- On RPAREN reduce production raw_expression -> NOT expression 
-- On RBRACKET reduce production raw_expression -> NOT expression 
-- On COMMA reduce production raw_expression -> NOT expression 

State 58:
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
statement -> WHILE LPAREN expression . RPAREN statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On TIMES shift to state 28
-- On RPAREN shift to state 59
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 59:
statement -> WHILE LPAREN expression RPAREN . statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 70
-- On statement shift to state 87

State 60:
statement -> SYSO . LPAREN expression RPAREN SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On LPAREN shift to state 61

State 61:
statement -> SYSO LPAREN . expression RPAREN SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 62

State 62:
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
statement -> SYSO LPAREN expression . RPAREN SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On TIMES shift to state 28
-- On RPAREN shift to state 63
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 63:
statement -> SYSO LPAREN expression RPAREN . SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On SEMICOLON shift to state 64

State 64:
statement -> SYSO LPAREN expression RPAREN SEMICOLON . [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 
-- On SYSO reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 
-- On RETURN reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 
-- On RBRACE reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 
-- On LBRACE reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 
-- On IF reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 
-- On IDENT reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 
-- On ELSE reduce production statement -> SYSO LPAREN expression RPAREN SEMICOLON 

State 65:
statement -> LBRACE . list(statement) RBRACE [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 70
-- On statement shift to state 83
-- On list(statement) shift to state 85
-- On RBRACE reduce production list(statement) -> 

State 66:
statement -> IF . LPAREN expression RPAREN statement ELSE statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On LPAREN shift to state 67

State 67:
statement -> IF LPAREN . expression RPAREN statement ELSE statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 68

State 68:
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET DOT AND ]
statement -> IF LPAREN expression . RPAREN statement ELSE statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On TIMES shift to state 28
-- On RPAREN shift to state 69
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 69:
statement -> IF LPAREN expression RPAREN . statement ELSE statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 70
-- On statement shift to state 80

State 70:
statement -> IDENT . ASSIGN expression SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
statement -> IDENT . LBRACKET expression RBRACKET ASSIGN expression SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On LBRACKET shift to state 71
-- On ASSIGN shift to state 77

State 71:
statement -> IDENT LBRACKET . expression RBRACKET ASSIGN expression SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 72

State 72:
raw_expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RBRACKET PLUS MINUS LT LBRACKET DOT AND ]
statement -> IDENT LBRACKET expression . RBRACKET ASSIGN expression SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On TIMES shift to state 28
-- On RBRACKET shift to state 73
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 73:
statement -> IDENT LBRACKET expression RBRACKET . ASSIGN expression SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On ASSIGN shift to state 74

State 74:
statement -> IDENT LBRACKET expression RBRACKET ASSIGN . expression SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 75

State 75:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression . SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On TIMES shift to state 28
-- On SEMICOLON shift to state 76
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 76:
statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON . [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
-- On SYSO reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
-- On RETURN reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
-- On RBRACE reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
-- On LBRACE reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
-- On IF reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
-- On IDENT reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
-- On ELSE reduce production statement -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 

State 77:
statement -> IDENT ASSIGN . expression SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 78

State 78:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
statement -> IDENT ASSIGN expression . SEMICOLON [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On TIMES shift to state 28
-- On SEMICOLON shift to state 79
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 79:
statement -> IDENT ASSIGN expression SEMICOLON . [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE reduce production statement -> IDENT ASSIGN expression SEMICOLON 
-- On SYSO reduce production statement -> IDENT ASSIGN expression SEMICOLON 
-- On RETURN reduce production statement -> IDENT ASSIGN expression SEMICOLON 
-- On RBRACE reduce production statement -> IDENT ASSIGN expression SEMICOLON 
-- On LBRACE reduce production statement -> IDENT ASSIGN expression SEMICOLON 
-- On IF reduce production statement -> IDENT ASSIGN expression SEMICOLON 
-- On IDENT reduce production statement -> IDENT ASSIGN expression SEMICOLON 
-- On ELSE reduce production statement -> IDENT ASSIGN expression SEMICOLON 

State 80:
statement -> IF LPAREN expression RPAREN statement . ELSE statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On ELSE shift to state 81

State 81:
statement -> IF LPAREN expression RPAREN statement ELSE . statement [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 70
-- On statement shift to state 82

State 82:
statement -> IF LPAREN expression RPAREN statement ELSE statement . [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 
-- On SYSO reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 
-- On RETURN reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 
-- On RBRACE reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 
-- On LBRACE reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 
-- On IF reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 
-- On IDENT reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 
-- On ELSE reduce production statement -> IF LPAREN expression RPAREN statement ELSE statement 

State 83:
list(statement) -> statement . list(statement) [ RETURN RBRACE ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On IF shift to state 66
-- On IDENT shift to state 70
-- On statement shift to state 83
-- On list(statement) shift to state 84
-- On RETURN reduce production list(statement) -> 
-- On RBRACE reduce production list(statement) -> 

State 84:
list(statement) -> statement list(statement) . [ RETURN RBRACE ]
-- On RETURN reduce production list(statement) -> statement list(statement) 
-- On RBRACE reduce production list(statement) -> statement list(statement) 

State 85:
statement -> LBRACE list(statement) . RBRACE [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On RBRACE shift to state 86

State 86:
statement -> LBRACE list(statement) RBRACE . [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE reduce production statement -> LBRACE list(statement) RBRACE 
-- On SYSO reduce production statement -> LBRACE list(statement) RBRACE 
-- On RETURN reduce production statement -> LBRACE list(statement) RBRACE 
-- On RBRACE reduce production statement -> LBRACE list(statement) RBRACE 
-- On LBRACE reduce production statement -> LBRACE list(statement) RBRACE 
-- On IF reduce production statement -> LBRACE list(statement) RBRACE 
-- On IDENT reduce production statement -> LBRACE list(statement) RBRACE 
-- On ELSE reduce production statement -> LBRACE list(statement) RBRACE 

State 87:
statement -> WHILE LPAREN expression RPAREN statement . [ WHILE SYSO RETURN RBRACE LBRACE IF IDENT ELSE ]
-- On WHILE reduce production statement -> WHILE LPAREN expression RPAREN statement 
-- On SYSO reduce production statement -> WHILE LPAREN expression RPAREN statement 
-- On RETURN reduce production statement -> WHILE LPAREN expression RPAREN statement 
-- On RBRACE reduce production statement -> WHILE LPAREN expression RPAREN statement 
-- On LBRACE reduce production statement -> WHILE LPAREN expression RPAREN statement 
-- On IF reduce production statement -> WHILE LPAREN expression RPAREN statement 
-- On IDENT reduce production statement -> WHILE LPAREN expression RPAREN statement 
-- On ELSE reduce production statement -> WHILE LPAREN expression RPAREN statement 

State 88:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement . RBRACE RBRACE [ EOF CLASS ]
-- On RBRACE shift to state 89

State 89:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE . RBRACE [ EOF CLASS ]
-- On RBRACE shift to state 90

State 90:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE . [ EOF CLASS ]
-- On EOF reduce production main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE 
-- On CLASS reduce production main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE statement RBRACE RBRACE 

State 91:
program' -> program . [ # ]
-- On # accept program

State 92:
program -> main_class . list(classDeclaration) EOF [ # ]
-- On CLASS shift to state 93
-- On list(classDeclaration) shift to state 139
-- On classDeclaration shift to state 141
-- On EOF reduce production list(classDeclaration) -> 

State 93:
classDeclaration -> CLASS . IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
classDeclaration -> CLASS . IDENT EXTENDS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On IDENT shift to state 94

State 94:
classDeclaration -> CLASS IDENT . LBRACE list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
classDeclaration -> CLASS IDENT . EXTENDS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On LBRACE shift to state 95
-- On EXTENDS shift to state 133

State 95:
classDeclaration -> CLASS IDENT LBRACE . list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On INTEGER shift to state 96
-- On IDENT shift to state 99
-- On BOOLEAN shift to state 100
-- On varDeclaration shift to state 101
-- On typ shift to state 102
-- On list(varDeclaration) shift to state 106
-- On RBRACE reduce production list(varDeclaration) -> 
-- On PUBLIC reduce production list(varDeclaration) -> 

State 96:
typ -> INTEGER . [ IDENT ]
typ -> INTEGER . LBRACKET RBRACKET [ IDENT ]
-- On LBRACKET shift to state 97
-- On IDENT reduce production typ -> INTEGER 

State 97:
typ -> INTEGER LBRACKET . RBRACKET [ IDENT ]
-- On RBRACKET shift to state 98

State 98:
typ -> INTEGER LBRACKET RBRACKET . [ IDENT ]
-- On IDENT reduce production typ -> INTEGER LBRACKET RBRACKET 

State 99:
typ -> IDENT . [ IDENT ]
-- On IDENT reduce production typ -> IDENT 

State 100:
typ -> BOOLEAN . [ IDENT ]
-- On IDENT reduce production typ -> BOOLEAN 

State 101:
list(varDeclaration) -> varDeclaration . list(varDeclaration) [ RBRACE PUBLIC ]
-- On INTEGER shift to state 96
-- On IDENT shift to state 99
-- On BOOLEAN shift to state 100
-- On varDeclaration shift to state 101
-- On typ shift to state 102
-- On list(varDeclaration) shift to state 105
-- On RBRACE reduce production list(varDeclaration) -> 
-- On PUBLIC reduce production list(varDeclaration) -> 

State 102:
varDeclaration -> typ . IDENT SEMICOLON [ WHILE SYSO RETURN RBRACE PUBLIC LBRACE INTEGER IF IDENT BOOLEAN ]
-- On IDENT shift to state 103

State 103:
varDeclaration -> typ IDENT . SEMICOLON [ WHILE SYSO RETURN RBRACE PUBLIC LBRACE INTEGER IF IDENT BOOLEAN ]
-- On SEMICOLON shift to state 104

State 104:
varDeclaration -> typ IDENT SEMICOLON . [ WHILE SYSO RETURN RBRACE PUBLIC LBRACE INTEGER IF IDENT BOOLEAN ]
-- On WHILE reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On SYSO reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On RETURN reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On RBRACE reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On PUBLIC reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On LBRACE reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On INTEGER reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On IF reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On IDENT reduce production varDeclaration -> typ IDENT SEMICOLON 
-- On BOOLEAN reduce production varDeclaration -> typ IDENT SEMICOLON 

State 105:
list(varDeclaration) -> varDeclaration list(varDeclaration) . [ RBRACE PUBLIC ]
-- On RBRACE reduce production list(varDeclaration) -> varDeclaration list(varDeclaration) 
-- On PUBLIC reduce production list(varDeclaration) -> varDeclaration list(varDeclaration) 

State 106:
classDeclaration -> CLASS IDENT LBRACE list(varDeclaration) . list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On PUBLIC shift to state 107
-- On methodDeclaration shift to state 129
-- On list(methodDeclaration) shift to state 131
-- On RBRACE reduce production list(methodDeclaration) -> 

State 107:
methodDeclaration -> PUBLIC . typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On INTEGER shift to state 96
-- On IDENT shift to state 99
-- On BOOLEAN shift to state 100
-- On typ shift to state 108

State 108:
methodDeclaration -> PUBLIC typ . IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On IDENT shift to state 109

State 109:
methodDeclaration -> PUBLIC typ IDENT . LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On LPAREN shift to state 110

State 110:
methodDeclaration -> PUBLIC typ IDENT LPAREN . loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On INTEGER shift to state 96
-- On IDENT shift to state 99
-- On BOOLEAN shift to state 100
-- On typ shift to state 111
-- On separated_nonempty_list(COMMA,argument) shift to state 113
-- On loption(separated_nonempty_list(COMMA,argument)) shift to state 114
-- On argument shift to state 126
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,argument)) -> 

State 111:
argument -> typ . IDENT [ RPAREN COMMA ]
-- On IDENT shift to state 112

State 112:
argument -> typ IDENT . [ RPAREN COMMA ]
-- On RPAREN reduce production argument -> typ IDENT 
-- On COMMA reduce production argument -> typ IDENT 

State 113:
loption(separated_nonempty_list(COMMA,argument)) -> separated_nonempty_list(COMMA,argument) . [ RPAREN ]
-- On RPAREN reduce production loption(separated_nonempty_list(COMMA,argument)) -> separated_nonempty_list(COMMA,argument) 

State 114:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) . RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On RPAREN shift to state 115

State 115:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN . LBRACE statAux RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On LBRACE shift to state 116

State 116:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE . statAux RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On INTEGER shift to state 96
-- On IF shift to state 66
-- On IDENT shift to state 117
-- On BOOLEAN shift to state 100
-- On varDeclaration shift to state 118
-- On typ shift to state 102
-- On statement shift to state 83
-- On statAux shift to state 121
-- On list(statement) shift to state 120
-- On RETURN reduce production list(statement) -> 

State 117:
statement -> IDENT . ASSIGN expression SEMICOLON [ WHILE SYSO RETURN LBRACE IF IDENT ]
statement -> IDENT . LBRACKET expression RBRACKET ASSIGN expression SEMICOLON [ WHILE SYSO RETURN LBRACE IF IDENT ]
typ -> IDENT . [ IDENT ]
-- On LBRACKET shift to state 71
-- On ASSIGN shift to state 77
-- On IDENT reduce production typ -> IDENT 

State 118:
statAux -> varDeclaration . statAux [ RETURN ]
-- On WHILE shift to state 15
-- On SYSO shift to state 60
-- On LBRACE shift to state 65
-- On INTEGER shift to state 96
-- On IF shift to state 66
-- On IDENT shift to state 117
-- On BOOLEAN shift to state 100
-- On varDeclaration shift to state 118
-- On typ shift to state 102
-- On statement shift to state 83
-- On statAux shift to state 119
-- On list(statement) shift to state 120
-- On RETURN reduce production list(statement) -> 

State 119:
statAux -> varDeclaration statAux . [ RETURN ]
-- On RETURN reduce production statAux -> varDeclaration statAux 

State 120:
statAux -> list(statement) . [ RETURN ]
-- On RETURN reduce production statAux -> list(statement) 

State 121:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux . RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On RETURN shift to state 122

State 122:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN . expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 123

State 123:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression . SEMICOLON RBRACE [ RBRACE PUBLIC ]
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON PLUS MINUS LT LBRACKET DOT AND ]
-- On TIMES shift to state 28
-- On SEMICOLON shift to state 124
-- On PLUS shift to state 35
-- On MINUS shift to state 37
-- On LT shift to state 30
-- On LBRACKET shift to state 39
-- On DOT shift to state 42
-- On AND shift to state 32

State 124:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON . RBRACE [ RBRACE PUBLIC ]
-- On RBRACE shift to state 125

State 125:
methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE . [ RBRACE PUBLIC ]
-- On RBRACE reduce production methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE 
-- On PUBLIC reduce production methodDeclaration -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,argument)) RPAREN LBRACE statAux RETURN expression SEMICOLON RBRACE 

State 126:
separated_nonempty_list(COMMA,argument) -> argument . [ RPAREN ]
separated_nonempty_list(COMMA,argument) -> argument . COMMA separated_nonempty_list(COMMA,argument) [ RPAREN ]
-- On COMMA shift to state 127
-- On RPAREN reduce production separated_nonempty_list(COMMA,argument) -> argument 

State 127:
separated_nonempty_list(COMMA,argument) -> argument COMMA . separated_nonempty_list(COMMA,argument) [ RPAREN ]
-- On INTEGER shift to state 96
-- On IDENT shift to state 99
-- On BOOLEAN shift to state 100
-- On typ shift to state 111
-- On separated_nonempty_list(COMMA,argument) shift to state 128
-- On argument shift to state 126

State 128:
separated_nonempty_list(COMMA,argument) -> argument COMMA separated_nonempty_list(COMMA,argument) . [ RPAREN ]
-- On RPAREN reduce production separated_nonempty_list(COMMA,argument) -> argument COMMA separated_nonempty_list(COMMA,argument) 

State 129:
list(methodDeclaration) -> methodDeclaration . list(methodDeclaration) [ RBRACE ]
-- On PUBLIC shift to state 107
-- On methodDeclaration shift to state 129
-- On list(methodDeclaration) shift to state 130
-- On RBRACE reduce production list(methodDeclaration) -> 

State 130:
list(methodDeclaration) -> methodDeclaration list(methodDeclaration) . [ RBRACE ]
-- On RBRACE reduce production list(methodDeclaration) -> methodDeclaration list(methodDeclaration) 

State 131:
classDeclaration -> CLASS IDENT LBRACE list(varDeclaration) list(methodDeclaration) . RBRACE [ EOF CLASS ]
-- On RBRACE shift to state 132

State 132:
classDeclaration -> CLASS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE . [ EOF CLASS ]
-- On EOF reduce production classDeclaration -> CLASS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE 
-- On CLASS reduce production classDeclaration -> CLASS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE 

State 133:
classDeclaration -> CLASS IDENT EXTENDS . IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On IDENT shift to state 134

State 134:
classDeclaration -> CLASS IDENT EXTENDS IDENT . LBRACE list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On LBRACE shift to state 135

State 135:
classDeclaration -> CLASS IDENT EXTENDS IDENT LBRACE . list(varDeclaration) list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On INTEGER shift to state 96
-- On IDENT shift to state 99
-- On BOOLEAN shift to state 100
-- On varDeclaration shift to state 101
-- On typ shift to state 102
-- On list(varDeclaration) shift to state 136
-- On RBRACE reduce production list(varDeclaration) -> 
-- On PUBLIC reduce production list(varDeclaration) -> 

State 136:
classDeclaration -> CLASS IDENT EXTENDS IDENT LBRACE list(varDeclaration) . list(methodDeclaration) RBRACE [ EOF CLASS ]
-- On PUBLIC shift to state 107
-- On methodDeclaration shift to state 129
-- On list(methodDeclaration) shift to state 137
-- On RBRACE reduce production list(methodDeclaration) -> 

State 137:
classDeclaration -> CLASS IDENT EXTENDS IDENT LBRACE list(varDeclaration) list(methodDeclaration) . RBRACE [ EOF CLASS ]
-- On RBRACE shift to state 138

State 138:
classDeclaration -> CLASS IDENT EXTENDS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE . [ EOF CLASS ]
-- On EOF reduce production classDeclaration -> CLASS IDENT EXTENDS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE 
-- On CLASS reduce production classDeclaration -> CLASS IDENT EXTENDS IDENT LBRACE list(varDeclaration) list(methodDeclaration) RBRACE 

State 139:
program -> main_class list(classDeclaration) . EOF [ # ]
-- On EOF shift to state 140

State 140:
program -> main_class list(classDeclaration) EOF . [ # ]
-- On # reduce production program -> main_class list(classDeclaration) EOF 

State 141:
list(classDeclaration) -> classDeclaration . list(classDeclaration) [ EOF ]
-- On CLASS shift to state 93
-- On list(classDeclaration) shift to state 142
-- On classDeclaration shift to state 141
-- On EOF reduce production list(classDeclaration) -> 

State 142:
list(classDeclaration) -> classDeclaration list(classDeclaration) . [ EOF ]
-- On EOF reduce production list(classDeclaration) -> classDeclaration list(classDeclaration) 

