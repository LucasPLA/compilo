### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends # cached
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ast.ml > ast.ml.depends # cached
# Target: type.ml.depends, tags: { extension:ml, file:type.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules type.ml > type.ml.depends # cached
# Target: type.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:type.cmo, file:type.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o type.cmo type.ml # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o ast.cmo ast.ml # cached
# Target: check_singleton_variable.ml.depends, tags: { extension:ml, file:check_singleton_variable.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules check_singleton_variable.ml > check_singleton_variable.ml.depends # cached
# Target: check_singleton_variable.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:check_singleton_variable.cmo, file:check_singleton_variable.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o check_singleton_variable.cmo check_singleton_variable.ml # cached
# Target: eval.ml.depends, tags: { extension:ml, file:eval.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules eval.ml > eval.ml.depends # cached
# Target: env.ml.depends, tags: { extension:ml, file:env.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules env.ml > env.ml.depends # cached
# Target: env.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:env.cmo, file:env.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o env.cmo env.ml # cached
# Target: substitution.ml.depends, tags: { extension:ml, file:substitution.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules substitution.ml > substitution.ml.depends # cached
# Target: substitution.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:substitution.cmo, file:substitution.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o substitution.cmo substitution.ml # cached
# Target: unification.ml.depends, tags: { extension:ml, file:unification.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules unification.ml > unification.ml.depends
# Target: unification.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:unification.cmo, file:unification.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o unification.cmo unification.ml
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.ml > parser.ml.depends
# Target: parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmo parser.ml
# Target: eval.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o eval.cmo eval.ml
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o main.cmo main.ml
# Target: type.cmx, tags: { compile, extension:cmx, extension:ml, file:type.cmx, file:type.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o type.cmx type.ml
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o ast.cmx ast.ml
# Target: check_singleton_variable.cmx, tags: { compile, extension:cmx, extension:ml, file:check_singleton_variable.cmx, file:check_singleton_variable.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o check_singleton_variable.cmx check_singleton_variable.ml
# Target: env.cmx, tags: { compile, extension:cmx, extension:ml, file:env.cmx, file:env.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o env.cmx env.ml
# Target: substitution.cmx, tags: { compile, extension:cmx, extension:ml, file:substitution.cmx, file:substitution.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o substitution.cmx substitution.ml
# Target: unification.cmx, tags: { compile, extension:cmx, extension:ml, file:unification.cmx, file:unification.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o unification.cmx unification.ml
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o parser.cmx parser.ml
# Target: eval.cmx, tags: { compile, extension:cmx, extension:ml, file:eval.cmx, file:eval.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o eval.cmx eval.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o lexer.cmx lexer.ml
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt type.cmx ast.cmx check_singleton_variable.cmx env.cmx substitution.cmx unification.cmx eval.cmx parser.cmx lexer.cmx main.cmx -o main.native
# Compilation successful.
